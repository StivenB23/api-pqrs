





 /**
 * @openapi
 * /pqrs/:
 *   post:
 *     summary: create a new pqrs
 *     tags:
 *      - pqrs
 *     requestBody:
 *          description: Optional description in *Markdown*
 *          required: true
 *          content:
 *              application/json:
 *               Schema: 
 *                  $ref: "#/components/schemas/Pqrs"
 *  
 *     responses:
 *       200:
 *         description: OK
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: OK
 *                 data:
 *                   type: object 
 *                   items: 
 *                         $ref: "#/components/schemas/Pqrs"
  /**
 * @openapi
 * /pqrs/user/{userid}:
 *   get:
 *     summary: return all pqrs of a user
 *     tags:
 *      - pqrs
 *     parameters:
 *       - in: path
 *         name: userid
 *         schema:
 *           type: string
 *         required: true
 *     responses:
 *       200:
 *         description: OK
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: OK
 *                 data:
 *                   type: array 
 *                   items: 
 *                         $ref: "#/components/schemas/Pqrs"
 *       4xx:
 *             description: FAILED
 *             content:
 *                  application/json:
 *                   schema:
 *                    type: object
 *                    properties:
 *                     errors:
 *                       type: object 
 *                       example: {field:fullname, msg:"not exist"},{field:fullname, msg:is empty},{field:email, msg:"not exist"},{field:email, msg:is empty},{field:password, msg:"not exist"},{field:password, msg:is empty}
 */
 * 
 **/
  /**
 * @openapi
 * /pqrs/user/{userid}:
 *   get:
 *     summary: return all pqrs of a user
 *     tags:
 *      - pqrs
 *     parameters:
 *       - in: path
 *         name: userid
 *         schema:
 *           type: string
 *         required: true
 *     responses:
 *       200:
 *         description: OK
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: OK
 *                 data:
 *                   type: array 
 *                   items: 
 *                         $ref: "#/components/schemas/Pqrs"
 *       400:
 *             description: FAILED
 *             content:
 *                  application/json:
 *                   schema:
 *                    type: object
 *                    properties:
 *                     error:
 *                       type: string 
 *                       example: "El id ingresado no es valido para realizar la busqueda"
 *       404:
 *             description: NOT FOUND
 *             content:
 *                  application/json:
 *                   schema:
 *                    type: object
 *                    properties:
 *                     error:
 *                       type: string 
 *                       example: "No se encontro resultados con el id ingresado"
 */
 *   
 */

 /**
 * @openapi
 * /pqrs/:
 *   put:
 *     summary: update the state of a pqrs
 *     tags:
 *      - pqrs
 *     requestBody:
 *          description: Optional description in *Markdown*
 *          required: true
 *          content:
 *              application/json:
 *               Schema: 
 *                  $ref: "#/components/schemas/Pqrs"
 *              application/x-www-form-urlencoded:
 *               schema:
 *                  $ref: '#/components/schemas/Pqrs'
 *                  
 *   responses:
 *       200:
 *         description: OK
 *         content:
 *           application/json:
 *             schema:
 *               type: Object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: OK
 *                 data:
 *                   type: array 
 *                   items: 
 *                         $ref: "#/components/schemas/Pqrs"
 */